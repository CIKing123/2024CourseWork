# -*- coding: utf-8 -*-
"""YOLO .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YIDED-F38CxlAWqfex5vaIAIgi3OuG9e
"""

import torch
import torch.nn as nn
import torchvision.models as models

__all__ = ["yolo"]

class YOLOModel(nn.Module):
    def __init__(self, num_classes, loss={"xent"}, pretrained=True, **kwargs):
        super(YOLOModel, self).__init__()
        self.num_classes = num_classes
        self.loss = loss
        self.pretrained = pretrained
        self.kwargs = kwargs

        # Load a pretrained backbone (e.g., ResNet50)
        self.backbone = models.resnet50(pretrained=self.pretrained)

        # Modify the backbone's last layer to match the number of classes
        in_features = self.backbone.fc.in_features
        self.backbone.fc = nn.Linear(in_features, self.num_classes)

    def forward(self, x):
        # Forward pass through the backbone
        x = self.backbone(x)
        return x

    
    def yolo1(num_classes, loss={"xent"}, pretrained=True, **kwargs):
    model = YOLOModel(
        "yolo",
        num_classes=num_classes,
        loss=loss,
        pretrained=pretrained,
        **kwargs,
    )
    return model
